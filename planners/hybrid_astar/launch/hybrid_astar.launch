<launch>
    <!-- size of map, change the size inflate x, y, z according to your application -->
    <arg name="map_size_x" value="30.0"/>
    <arg name="map_size_y" value="30.0"/>
    <arg name="map_size_z" value=" 3.0"/>
    <!-- topic of your odometry such as VIO or LIO -->
    <arg name="odom_topic" value="/visual_slam/odom" />
  
    <node pkg="prometheus_hybrid_astar" name="hybrid_astar" type="hybrid_astar" output="screen">
        <remap from="/prometheus/global_planning/global_pcl" to="/map_generator/global_cloud" />
        <remap from="/odom" to="$(arg odom_topic)"/>
        <!-- 参数 -->
        <!-- 二维平面规划 -->
        <param name="global_planner/is_2D" value="false" type="bool"/>
        <!-- ２维高度，建议与起飞高度一致 -->
        <param name="global_planner/fly_height_2D" value="1.0" type="double"/>
        <!-- 停止距离 -->
        <param name="global_planner/safe_distance" value="0.01" type="double"/>
        <param name="global_planner/time_per_path" value="0.4" type="double"/>
        <param name="global_planner/replan_time" value="5.0" type="double"/>
        <param name="global_planner/map_input" value="0" type="int"/>
        <param name="global_planner/sim_mode" value="true" type="bool"/>
        <param name="kinodynamic_astar/max_tau" value="0.5" type="double"/>
        <param name="kinodynamic_astar/init_max_tau" value="0.5" type="double"/>
        <param name="kinodynamic_astar/max_vel" value="1.0" type="double"/>
        <param name="kinodynamic_astar/max_acc" value="1.0" type="double"/>
        <param name="kinodynamic_astar/w_time" value="15.0" type="double"/>
        <param name="kinodynamic_astar/horizon" value="9.0" type="double"/>
        <param name="kinodynamic_astar/lambda_heu" value="2.0" type="double"/>
        <param name="kinodynamic_astar/time_resolution" value="2.0" type="double"/>
        <param name="kinodynamic_astar/margin" value="0.4" type="double"/>
        <param name="kinodynamic_astar/allocate_num" value="100000" type="int"/>
        <param name="kinodynamic_astar/check_num" value="5" type="int"/>
        <!-- 分辨率 -->
        <param name="map/resolution" value="0.2" type="double"/>
        <!-- 障碍物膨胀距离 -->
        <param name="map/inflate" value="0.1" type="double"/>
        <!-- 地图范围 -->
        <param name="map/origin_x" value="-16.0" type="double"/>
        <param name="map/origin_y" value="-16.0" type="double"/>
        <param name="map/origin_z" value="-0.5" type="double"/>
        <param name="map/map_size_x" value="30.0" type="double"/>
        <param name="map/map_size_y" value="30.0" type="double"/>
        <param name="map/map_size_z" value="3.0" type="double"/>
    </node>
    <include file="$(find ego_planner)/launch/advanced_param.xml">
      <arg name="map_size_x_" value="$(arg map_size_x)"/>
      <arg name="map_size_y_" value="$(arg map_size_y)"/>
      <arg name="map_size_z_" value="$(arg map_size_z)"/>
      <arg name="odometry_topic" value="$(arg odom_topic)"/>
  
      <!-- camera pose: transform of camera frame in the world frame -->
      <!-- depth topic: depth image, 640x480 by default -->
      <!-- don't set cloud_topic if you already set these ones! -->
      <arg name="camera_pose_topic" value="/pcl_render_node/camera_pose"/>
      <arg name="depth_topic" value="/pcl_render_node/depth"/>
  
      <!-- topic of point cloud measurement, such as from LIDAR  -->
      <!-- don't set camera pose and depth, if you already set this one! -->
      <arg name="cloud_topic" value="/pcl_render_node/cloud"/>
  
      <!-- intrinsic params of the depth camera -->
      <arg name="cx" value="321.04638671875"/>
      <arg name="cy" value="243.44969177246094"/>
      <arg name="fx" value="387.229248046875"/>
      <arg name="fy" value="387.229248046875"/>
  
      <!-- maximum velocity and acceleration the drone will reach -->
      <arg name="max_vel" value="2.0" />
      <arg name="max_acc" value="3.0" />
  
      <!--always set to 1.5 times grater than sensing horizen-->
      <arg name="planning_horizon" value="7.5" /> 
  
      <!-- 1: use 2D Nav Goal to select goal  -->
      <!-- 2: use global waypoints below  -->
      <arg name="flight_type" value="1" />
      
      <!-- global waypoints -->
      <!-- It generates a piecewise min-snap traj passing all waypoints -->
      <arg name="point_num" value="5" />
  
      <arg name="point0_x" value="-15.0" />
      <arg name="point0_y" value="0.0" />
      <arg name="point0_z" value="1.0" />
  
      <arg name="point1_x" value="0.0" />
      <arg name="point1_y" value="15.0" />
      <arg name="point1_z" value="1.0" />
  
      <arg name="point2_x" value="15.0" />
      <arg name="point2_y" value="0.0" />
      <arg name="point2_z" value="1.0" />
  
      <arg name="point3_x" value="0.0" />
      <arg name="point3_y" value="-15.0" />
      <arg name="point3_z" value="1.0" />
  
      <arg name="point4_x" value="-15.0" />
      <arg name="point4_y" value="0.0" />
      <arg name="point4_z" value="1.0" />
      
    </include>
  
    <!-- trajectory server -->
    <node pkg="ego_planner" name="traj_server" type="traj_server" output="screen">
      <remap from="/position_cmd" to="planning/pos_cmd"/>
  
      <remap from="/odom_world" to="$(arg odom_topic)"/>
      <param name="traj_server/time_forward" value="1.0" type="double"/>
    </node>
  
    <node pkg="waypoint_generator" name="waypoint_generator" type="waypoint_generator" output="screen">
      <remap from="~odom" to="$(arg odom_topic)"/>        
      <remap from="~goal" to="/demo_node/current_goal"/>
      <remap from="~traj_start_trigger" to="/traj_start_trigger" />
      <param name="waypoint_type" value="manual-lonely-waypoint"/>    
    </node>
  
    <!-- use simulator -->
    <include file="$(find ego_planner)/launch/simulator.xml">
      <arg name="map_size_x_" value="$(arg map_size_x)"/>
      <arg name="map_size_y_" value="$(arg map_size_y)"/>
      <arg name="map_size_z_" value="$(arg map_size_z)"/>
      <arg name="c_num" value="10"/>
      <arg name="p_num" value="10"/>
      <arg name="min_dist" value="1.2"/>
      <arg name="init_x" value = "-10.0"/>
      <arg name="init_y" value = "-10.0"/>
      <arg name="init_z" value = "1.0"/>
  
      <arg name="odometry_topic" value="$(arg odom_topic)" />
    </include>
  
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find prometheus_hybrid_astar)/launch/default.rviz" required="true" />
  
  
  </launch>